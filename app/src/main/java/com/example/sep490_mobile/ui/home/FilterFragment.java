package com.example.sep490_mobile.ui.home;

import android.app.TimePickerDialog;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.ImageButton;
import android.widget.SeekBar;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import androidx.lifecycle.ViewModelProvider;

import com.example.sep490_mobile.R;
import com.example.sep490_mobile.utils.removeVietnameseSigns;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

public class FilterFragment extends Fragment {
    private TextView address;
    private SeekBar priceSeekBar;
    private TextView tvCurrentPrice;
    private TextView tvStartTime;
    private TextView tvEndTime;
    private Button btnApplyFilters, btnClearAll;
    private int price;

    private Map<String, String> odata = new HashMap<>();
    // Danh s√°ch CheckBox ƒë·ªÉ d·ªÖ d√†ng qu·∫£n l√Ω
    private CheckBox[] sportCheckBoxes;

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        // √Ånh x·∫° layout fragment_filter.xml
        View view = inflater.inflate(R.layout.fragment_filter, container, false);
        SharedViewModel model = new ViewModelProvider(requireActivity()).get(SharedViewModel.class);

        // √Ånh x·∫° View ch√≠nh
        address = view.findViewById(R.id.et_location_search);
        priceSeekBar = view.findViewById(R.id.price_seekbar);
        tvCurrentPrice = view.findViewById(R.id.tv_current_price);
        btnApplyFilters = view.findViewById(R.id.btn_apply_filters);
        btnClearAll = view.findViewById(R.id.btn_clear_all);
        ImageButton btnCloseFilter = view.findViewById(R.id.btn_close_filter);
// 1. √Ånh x·∫° View t·ª´ XML
        tvStartTime = view.findViewById(R.id.tv_start_time);
        tvEndTime = view.findViewById(R.id.tv_end_time);

        tvStartTime.setText(model.getStartTime().getValue());
        tvEndTime.setText(model.getEndTime().getValue());

        // 2. Thi·∫øt l·∫≠p Listener cho c·∫£ hai TextView
        tvStartTime.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showTimePickerDialog(tvStartTime, tvStartTime.getText().toString());
            }
        });

        tvEndTime.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showTimePickerDialog(tvEndTime, tvEndTime.getText().toString());
            }
        });
        // Kh·ªüi t·∫°o danh s√°ch CheckBox (cho m·ª•c ƒë√≠ch qu·∫£n l√Ω/reset)
        sportCheckBoxes = new CheckBox[]{
                view.findViewById(R.id.cb_bongda5),
                view.findViewById(R.id.cb_bongda7),
                view.findViewById(R.id.cb_bongda11),
                view.findViewById(R.id.cb_bongro),
                view.findViewById(R.id.cb_tennis),
                view.findViewById(R.id.cb_bongchuyen)
                // ... th√™m c√°c CheckBox kh√°c ·ªü ƒë√¢y
        };


        // 2. X·ª≠ l√Ω s·ª± ki·ªán nh·∫•n n√∫t ƒê√≥ng
        if (btnCloseFilter != null) {
            btnCloseFilter.setOnClickListener(v -> {
                // L·∫•y FragmentManager v√† quay l·∫°i Fragment tr∆∞·ªõc ƒë√≥ trong Back Stack
                FragmentManager fragmentManager = getParentFragmentManager();
                if (fragmentManager.getBackStackEntryCount() > 0) {
                    fragmentManager.popBackStack();

                } else {
                    // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p kh√¥ng c√≥ g√¨ trong back stack (hi·∫øm)
                    Toast.makeText(getContext(), "Kh√¥ng th·ªÉ ƒë√≥ng Fragment", Toast.LENGTH_SHORT).show();
                }
            });
        }
        loadPreviousSportSelections(model.getSportType().getValue());
        setupPriceSeekBar();
        setupActionButtons();
        setOldValue();

        return view;
    }

    public void loadPreviousSportSelections(List<String> previouslySelectedIds) {

        if (previouslySelectedIds == null || previouslySelectedIds.isEmpty()) {
            // Kh√¥ng c√≥ d·ªØ li·ªáu c≈©, kh√¥ng c·∫ßn l√†m g√¨
            return;
        }

        for (CheckBox checkBox : sportCheckBoxes) {
            // 1. L·∫•y ID c·ªßa CheckBox hi·ªán t·∫°i
            String idName = getResources().getResourceEntryName(checkBox.getId());

            // 2. Ki·ªÉm tra xem ID n√†y c√≥ trong danh s√°ch ƒë√£ ch·ªçn tr∆∞·ªõc ƒë√≥ kh√¥ng
            boolean isChecked = previouslySelectedIds.contains(checkBox.getText().toString());

            // 3. Thi·∫øt l·∫≠p tr·∫°ng th√°i
            checkBox.setChecked(isChecked);
        }
    }



    private void setOldValue(){
        SharedViewModel model = new ViewModelProvider(requireActivity()).get(SharedViewModel.class);

        tvStartTime.setText(model.getStartTime().getValue());
        tvEndTime.setText(model.getEndTime().getValue());
        address.setText(model.getAddress().getValue());
        Toast.makeText(this.getContext(), model.getPrice().getValue(), Toast.LENGTH_SHORT).show();
        int price = Integer.parseInt(model.getPrice().getValue()) / 1000;

        priceSeekBar.setProgress(price);

    }

    /**
     * H√†m hi·ªÉn th·ªã TimePickerDialog
     * @param targetTextView TextView c·∫ßn c·∫≠p nh·∫≠t k·∫øt qu·∫£
     */
    private void showTimePickerDialog(final TextView targetTextView, String time) {
        System.out.println("showTimePickerDialog");

        // --- KH·ªûI T·∫†O GI√Å TR·ªä M·∫∂C ƒê·ªäNH ---

        // M·∫∑c ƒë·ªãnh ban ƒë·∫ßu l√† gi·ªù hi·ªán t·∫°i c·ªßa h·ªá th·ªëng (ph√≤ng tr∆∞·ªùng h·ª£p parsing l·ªói)
        final Calendar c = Calendar.getInstance();
        int initialHour = c.get(Calendar.HOUR_OF_DAY);
        int initialMinute = c.get(Calendar.MINUTE);

        // 1. L·∫•y gi√° tr·ªã hi·ªán t·∫°i c·ªßa TextView (v√≠ d·ª•: "09:00" ho·∫∑c "15:00")
        String currentText = targetTextView.getText().toString();

        // 2. Ki·ªÉm tra n·∫øu chu·ªói c√≥ ƒë·ªãnh d·∫°ng HH:mm h·ª£p l·ªá, th√¨ ph√¢n t√≠ch v√† s·ª≠ d·ª•ng
        if (currentText.matches("\\d{2}:\\d{2}")) {
            try {
                String[] parts = currentText.split(":");
                // C·∫≠p nh·∫≠t gi√° tr·ªã m·∫∑c ƒë·ªãnh b·∫±ng gi·ªù ƒë√£ ch·ªçn tr∆∞·ªõc ƒë√≥
                initialHour = Integer.parseInt(parts[0]);
                initialMinute = Integer.parseInt(parts[1]);
            } catch (NumberFormatException e) {
                // N·∫øu c√≥ l·ªói ph√¢n t√≠ch c√∫ ph√°p, gi·ªØ nguy√™n gi·ªù h·ªá th·ªëng m·∫∑c ƒë·ªãnh
                e.printStackTrace();
            }
        }


        // Kh·ªüi t·∫°o TimePickerDialog
        // L∆ØU √ù: N·∫øu code n√†y n·∫±m trong Fragment, h√£y thay 'this.getContext()' b·∫±ng 'requireContext()'
        TimePickerDialog timePickerDialog = new TimePickerDialog(
                this.getContext(), // Context
                new TimePickerDialog.OnTimeSetListener() {
                    @Override
                    public void onTimeSet(TimePicker view, int hourOfDay, int minute) {
                        // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn gi·ªù xong
                        // ƒê·ªãnh d·∫°ng gi·ªù: "HH:mm" (v√≠ d·ª•: 08:05)
                        String selectedTime = String.format(Locale.getDefault(), "%02d:%02d", hourOfDay, minute);

                        // C·∫≠p nh·∫≠t TextView v·ªõi gi·ªù ƒë√£ ch·ªçn
                        targetTextView.setText(selectedTime);
                    }
                },
                initialHour,   // Gi·ªù m·∫∑c ƒë·ªãnh (gi·ªù c≈©)
                initialMinute, // Ph√∫t m·∫∑c ƒë·ªãnh (ph√∫t c≈©)
                true           // ƒê·ªãnh d·∫°ng 24 gi·ªù
        );

        Toast.makeText(this.getContext(), "Gi·ªù ƒë√£ ch·ªçn: " + targetTextView.getText(), Toast.LENGTH_SHORT).show();
        // Hi·ªÉn th·ªã h·ªôp tho·∫°i
        timePickerDialog.show();
    }
    private void setBtnApplyFilters(){
        SharedViewModel model = new ViewModelProvider(requireActivity()).get(SharedViewModel.class);
            FragmentManager fragmentManager = getParentFragmentManager();
        String filter = "";
        String conjunction = ""; // üëà Start with an empty conjunction

// 1. Address Filter
        if(address.length() > 0){
            filter += "contains(AddressUnsigned, '" + removeVietnameseSigns.removeVietnameseSigns(address.getText().toString()) + "')";
            conjunction = " and "; // üëà Set conjunction only after the first condition is added
            model.setAddress(address.getText().toString());
        }else{
            model.setAddress("");
        }

// 2. Sport Type Filter(s)
        if(sportCheckBoxes.length > 0){
            List<String> sportTypes = new ArrayList<>();

            for (CheckBox cb : sportCheckBoxes) {
                if (cb.isChecked()) {
                    String sportName = cb.getText().toString();

                    // 1. X√¢y d·ª±ng ƒëi·ªÅu ki·ªán OData ch√≠nh x√°c v√† th√™m v√†o List
                    // C·∫ßn c√≥ d·∫•u nh√°y ƒë∆°n '...' cho gi√° tr·ªã chu·ªói trong OData
                    String condition = String.format("c/SportType eq '%s'", sportName);
                    sportTypes.add(condition);

                    // C·∫≠p nh·∫≠t Model (Gi·ªØ nguy√™n logic c·ªßa b·∫°n)
                    // L∆∞u √Ω: List.of() ch·ªâ c√≥ t·ª´ Java 9 tr·ªü l√™n
                     model.setSportType(List.of(sportName));
                }
            }

            if (!sportTypes.isEmpty()) {
                // 2. S·ª≠ d·ª•ng String.join() ƒë·ªÉ n·ªëi c√°c ƒëi·ªÅu ki·ªán b·∫±ng " or "
                String typeFilter = String.join(" or ", sportTypes);

                // 3. X√¢y d·ª±ng chu·ªói filter ho√†n ch·ªânh v√† th√™m v√†o 'filter'
                // C·∫ßn b·ªçc ƒëi·ªÅu ki·ªán b·∫±ng d·∫•u ngo·∫∑c ƒë∆°n ƒë·ªÉ ƒë·∫£m b·∫£o logic OData ƒë√∫ng
                filter += conjunction + "Courts/any(c: (" + typeFilter + "))";

                // 4. C·∫≠p nh·∫≠t conjunction cho c√°c filter ti·∫øp theo
                conjunction = " and ";
            }
        }else{
            model.setSportType(List.of());
        }

// 3. Price Filter
        if(price > 0){
            // Use the conjunction BEFORE adding the new part
            filter += conjunction + "Courts/any(c: c/PricePerHour le " + price + ")";
            conjunction = " and ";

            model.setPrice(price + "");
        }
        if(tvStartTime.getText().toString().isEmpty() == false && tvEndTime.getText().toString().isEmpty() == false){
            // 4. Time Filter
            //format time

            String startTime = tvStartTime.getText().toString(); // V√≠ d·ª•: "09:00"
            String endTime = tvEndTime.getText().toString();     // V√≠ d·ª•: "17:30"
            model.setStartTime(startTime);
            model.setEndTime(endTime);

// --- B∆Ø·ªöC 1: T√ÅCH GI·ªú V√Ä PH√öT ---

// T√°ch Gi·ªù B·∫Øt ƒë·∫ßu
            String[] startParts = startTime.split(":");
            int startHour = Integer.parseInt(startParts[0]); // sh
            int startMinute = Integer.parseInt(startParts[1]); // sm

// T√°ch Gi·ªù K·∫øt th√∫c
            String[] endParts = endTime.split(":");
            int endHour = Integer.parseInt(endParts[0]); // eh
            int endMinute = Integer.parseInt(endParts[1]); // em
// --- B∆Ø·ªöC 2: ƒê·ªäNH D·∫†NG CHU·ªñI DURATION CHU·∫®N ODATA ---

            String startDuration = String.format(Locale.ROOT, "duration'PT%dH%dM'", startHour, startMinute);
// ƒê·ªãnh d·∫°ng cho Gi·ªù K·∫øt th√∫c
            String endDuration = String.format(Locale.ROOT, "duration'PT%dH%dM'", endHour, endMinute);
// K·∫øt qu·∫£ (cho 17:30): duration'PT17H30M'

            filter += conjunction + "OpenTime le " + startDuration + " and CloseTime ge " + endDuration ;
        }else{
            model.setStartTime("");
            model.setEndTime("");
        }

        odata.put("$filter", filter);



            if (fragmentManager.getBackStackEntryCount() > 0) {
                // 2. T·∫°o Bundle ƒë·ªÉ ƒë√≥ng g√≥i d·ªØ li·ªáu


                    model.select(odata);


                fragmentManager.popBackStack();

            } else {
                // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p kh√¥ng c√≥ g√¨ trong back stack (hi·∫øm)
                Toast.makeText(getContext(), "Kh√¥ng th·ªÉ ƒë√≥ng Fragment", Toast.LENGTH_SHORT).show();
            }

    }



    // Thi·∫øt l·∫≠p SeekBar (Kho·∫£ng Gi√°)
    private void setupPriceSeekBar() {
        // Max l√† 500, ƒë·∫°i di·ªán cho 500.000 VNƒê

        priceSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                // Gi√° tr·ªã th·ª±c t·∫ø: progress * 1000 VNƒê. V√≠ d·ª•: 250 * 1000 = 250.000
                int priceValue = progress * 1000;
                DecimalFormat formatter = new DecimalFormat("#,###");
                // Chuy·ªÉn ƒë·ªïi sang ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá

                if (progress == seekBar.getMax()) {
                    price = priceValue;
                    tvCurrentPrice.setText("Gi√° t·ªëi ƒëa: " + formatter.format(priceValue) + "ƒë/gi·ªù");
                } else {
                    price = priceValue;
                    tvCurrentPrice.setText("Gi√° t·ªëi ƒëa: " + formatter.format(priceValue) + "ƒë/gi·ªù");
                }
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {
                // Kh√¥ng c·∫ßn l√†m g√¨
            }

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {
                // C√≥ th·ªÉ √°p d·ª•ng logic t√¨m ki·∫øm t·ª± ƒë·ªông ·ªü ƒë√¢y
            }
        });

        // Thi·∫øt l·∫≠p gi√° tr·ªã ban ƒë·∫ßu
        priceSeekBar.setProgress(250); // M·∫∑c ƒë·ªãnh 250, t∆∞∆°ng ·ª©ng 250.000ƒë
    }

    // Thi·∫øt l·∫≠p c√°c n√∫t h√†nh ƒë·ªông
    private void setupActionButtons() {
        btnApplyFilters.setOnClickListener(v -> {
            // TODO: Thu th·∫≠p d·ªØ li·ªáu v√† √°p d·ª•ng b·ªô l·ªçc
            collectFilterData();

        });

        btnClearAll.setOnClickListener(v -> {

            // ƒê·∫∑t l·∫°i SeekBar
            priceSeekBar.setProgress(priceSeekBar.getMax()); // ƒê·∫∑t l·∫°i m·ª©c t·ªëi ƒëa
            tvCurrentPrice.setText("Gi√° t·ªëi ƒëa: 500.000ƒë/gi·ªù");
            // ƒê·∫∑t l·∫°i CheckBox
            for (CheckBox cb : sportCheckBoxes) {
                cb.setChecked(false);
            }
            Toast.makeText(getContext(), "ƒê√£ x√≥a t·∫•t c·∫£ b·ªô l·ªçc", Toast.LENGTH_SHORT).show();
        });
    }

    // H√†m thu th·∫≠p d·ªØ li·ªáu b·ªô l·ªçc
    private void collectFilterData() {
        // Thu th·∫≠p lo·∫°i th·ªÉ thao ƒë√£ ch·ªçn
        StringBuilder sportSelected = new StringBuilder();
        for (CheckBox cb : sportCheckBoxes) {
            if (cb.isChecked()) {
                sportSelected.append(cb.getText().toString()).append(", ");
            }
        }


        int maxPrice = priceSeekBar.getProgress() * 1000;
        setBtnApplyFilters();
        // In ra Console/Logcat ƒë·ªÉ ki·ªÉm tra

        // B·∫°n s·∫Ω truy·ªÅn d·ªØ li·ªáu n√†y cho Activity/ViewModel ƒë·ªÉ th·ª±c hi·ªán t√¨m ki·∫øm
    }
}
