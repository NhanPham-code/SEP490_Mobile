package com.example.sep490_mobile.ui.stadiumDetail;

import android.content.pm.ActivityInfo;
import android.net.Uri;
import android.os.Bundle;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import androidx.lifecycle.ViewModelProvider;

import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.MediaController;
import android.widget.Toast;
import android.widget.VideoView;

import com.bumptech.glide.Glide;
import com.example.sep490_mobile.R;
import com.example.sep490_mobile.data.dto.CourtsDTO;
import com.example.sep490_mobile.data.dto.ODataResponse;
import com.example.sep490_mobile.data.dto.StadiumDTO;
import com.example.sep490_mobile.data.dto.StadiumImagesDTO;
import com.example.sep490_mobile.data.dto.StadiumVideosDTO;
import com.example.sep490_mobile.databinding.FragmentStadiumDetailBinding;
import com.example.sep490_mobile.utils.ImageUtils;
import com.example.sep490_mobile.utils.PriceFormatter;
import com.example.sep490_mobile.viewmodel.StadiumViewModel;
import com.google.android.exoplayer2.ExoPlayer;
import com.google.android.exoplayer2.MediaItem;
import com.google.android.exoplayer2.Player;
import com.google.android.exoplayer2.ui.PlayerControlView;
import com.google.android.exoplayer2.ui.PlayerView;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class StadiumDetailFragment extends Fragment {

    private FragmentStadiumDetailBinding binding;
    private StadiumViewModel stadiumViewModel;
    private boolean isVideoPlaying = false;
    private Button viewImg;
    private Button viewVideo;
    private ImageButton nextButton;
    private ImageButton backButton;
    private ImageButton nextButtonVideo;
    private ImageButton backButtonVideo;
    private ImageView stadiumImage;
    private ImageButton backToHomeButton;
    private PlayerView playerView;
    private ExoPlayer player;
    private int imgPosition;
    private int videoPosition;
    private StadiumDTO stadiumDTO;
    private int stadiumId;
    private boolean isMuted = false;
    private ImageButton volumeButton;
    private ImageButton customFullscreenButton;
    private boolean isFullScreen = false;
    private int initialHeightPx;
    private ViewGroup originalParent;
    private ViewGroup activityRootView; // Root view c·ªßa Activity
    private ConstraintLayout videoOverlayContainer; // üí° Bi·∫øn m·ªõi

    public static StadiumDetailFragment newInstance(int stadiumId) {
        StadiumDetailFragment fragment = new StadiumDetailFragment();
        Bundle args = new Bundle();
        args.putInt("stadiumId", stadiumId);
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getArguments() != null) {
            stadiumId = getArguments().getInt("stadiumId");
        }
    }

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        binding = FragmentStadiumDetailBinding.inflate(inflater, container, false);
        View root = binding.getRoot();
        stadiumViewModel = new ViewModelProvider(this).get(StadiumViewModel.class);
        volumeButton = root.findViewById(R.id.btn_toggle_volume);
        nextButtonVideo = root.findViewById(R.id.btn_next_video);
        backButtonVideo = root.findViewById(R.id.btn_prev_video);
        viewImg = root.findViewById(R.id.view_img);
        viewVideo = root.findViewById(R.id.view_video);
        backToHomeButton = root.findViewById(R.id.btn_back);
        stadiumImage = root.findViewById(R.id.iv_stadium_image);
        playerView = root.findViewById(R.id.vv_stadium_video);
        nextButton = root.findViewById(R.id.btn_next);
        backButton = root.findViewById(R.id.btn_prev);
        customFullscreenButton = root.findViewById(R.id.btn_custom_fullscreen);
// ... (Trong ph∆∞∆°ng th·ª©c onViewCreated ho·∫∑c setup)
        videoOverlayContainer = root.findViewById(R.id.video_full_screen_container); // üí° THAY TH·∫æ vv_stadium_video
        if (videoOverlayContainer != null) {
            originalParent = (ViewGroup) videoOverlayContainer.getParent();
        }
        if (getActivity() != null) {
            activityRootView = (ViewGroup) getActivity().findViewById(android.R.id.content);
        }

// L∆∞u chi·ªÅu cao ban ƒë·∫ßu (t√≠nh to√°n t·ª´ video_overlay_container, kh√¥ng c·∫ßn PlayerView)
        float density = getResources().getDisplayMetrics().density;
        initialHeightPx = (int) (200 * density); // Gi·ªØ l·∫°i gi√° tr·ªã ban ƒë·∫ßu 200dp

        // 1. Thi·∫øt l·∫≠p tham s·ªë OData
        Map<String, String> odataUrl = new HashMap<>();
        odataUrl.put("$expand", "Courts,StadiumImages,StadiumVideos");
        // S·ª¨A: L·ªçc ch√≠nh x√°c theo ID
        odataUrl.put("$filter", "Id eq " + stadiumId);

        // 2. Thi·∫øt l·∫≠p Observer tr∆∞·ªõc
        observeStadiumListResponse();

        // 3. G·ªçi API ƒë·ªÉ t·∫£i d·ªØ li·ªáu
        stadiumViewModel.fetchStadium(odataUrl);

        nextButtonVideo.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                StadiumVideosDTO[] videosDTOS = stadiumDTO.getStadiumVideos().toArray(new StadiumVideosDTO[0]);
                if(videoPosition < videosDTOS.length - 1){
                    videoPosition ++;
                    player.seekToNextMediaItem();
                }
                setNextButton();
            }
        });
        backButtonVideo.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if(videoPosition > 0){
                    videoPosition --;
                    player.seekToPreviousMediaItem();
                }
                setBackButton();
            }
        });

        // 4. Thi·∫øt l·∫≠p s·ª± ki·ªán cho n√∫t next v√† back
        nextButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                StadiumImagesDTO[] stadiumImagesDTOS = stadiumDTO.getStadiumImages().toArray(new StadiumImagesDTO[0]);


                    if(imgPosition < stadiumImagesDTOS.length - 1){
                        imgPosition ++;
                        Glide.with(getContext()).load(ImageUtils.getFullUrl(stadiumImagesDTOS.length > 0 ? "img/" + stadiumImagesDTOS[imgPosition].imageUrl : "")).centerCrop().into(binding.ivStadiumImage);
                    }


                setNextButton();
            }
        });
        backButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                StadiumImagesDTO[] stadiumImagesDTOS = stadiumDTO.getStadiumImages().toArray(new StadiumImagesDTO[0]);

                    if ( imgPosition > 0 ) {
                        imgPosition --;
                        Glide.with(getContext()).load(ImageUtils.getFullUrl(stadiumImagesDTOS.length > 0 ? "img/" + stadiumImagesDTOS[imgPosition].imageUrl : "")).centerCrop().into(binding.ivStadiumImage);
                    }

                setBackButton();
            }
        });

        // 5. Thi·∫øt l·∫≠p s·ª± ki·ªán cho n√∫t back
        backToHomeButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                FragmentManager fragmentManager = getParentFragmentManager();
                if (fragmentManager.getBackStackEntryCount() > 0) {
                    fragmentManager.popBackStack();

                } else {
                    // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p kh√¥ng c√≥ g√¨ trong back stack (hi·∫øm)
                    Toast.makeText(getContext(), "Kh√¥ng th·ªÉ ƒë√≥ng Fragment", Toast.LENGTH_SHORT).show();
                }
            }
        });

        // 6. Thi·∫øt l·∫≠p s·ª± ki·ªán cho n√∫t viewImg v√† viewVideo
        viewImg.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                StadiumImagesDTO[] stadiumImagesDTO = stadiumDTO.getStadiumImages().toArray(new StadiumImagesDTO[0]);
                binding.btnNextVideo.setVisibility(View.GONE);
                binding.btnPrevVideo.setVisibility(View.GONE);
                isMuted = true;
                volumeButton.setVisibility(View.GONE);
                if(stadiumImagesDTO.length > 1){
                    binding.btnNext.setVisibility(View.VISIBLE);
                    binding.btnPrev.setVisibility(View.VISIBLE);
                }
                switchToImage();
            }
        });

        viewVideo.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                StadiumVideosDTO[] videosDTOS = stadiumDTO.getStadiumVideos().toArray(new StadiumVideosDTO[0]);
                if(videosDTOS.length > 1){
                    binding.btnNextVideo.setVisibility(View.VISIBLE);
                    binding.btnPrevVideo.setVisibility(View.VISIBLE);
                }else{
                    binding.btnNextVideo.setVisibility(View.GONE);
                    binding.btnPrevVideo.setVisibility(View.GONE);
                }
                volumeButton.setVisibility(View.VISIBLE);
                switchToVideo();
            }
        });
        playerView.setControllerVisibilityListener(new PlayerControlView.VisibilityListener() {
            @Override
            public void onVisibilityChange(int visibility) {
                // 'visibility' s·∫Ω l√† View.VISIBLE ho·∫∑c View.GONE

                if (visibility == View.VISIBLE) {
                    // B·ªô ƒëi·ªÅu khi·ªÉn ƒëang HI·ªÇN TH·ªä
                    // V√≠ d·ª•: Hi·ªÉn th·ªã c√°c n√∫t t√πy ch·ªânh c·ªßa b·∫°n

                    customFullscreenButton.setVisibility(View.VISIBLE);
                } else {
                    // B·ªô ƒëi·ªÅu khi·ªÉn ƒëang ·∫®N
                    // V√≠ d·ª•: ·∫®n c√°c n√∫t t√πy ch·ªânh c·ªßa b·∫°n
                    customFullscreenButton.setVisibility(View.GONE);
                }
            }
        });
        volumeButton.setOnClickListener(v -> toggleVolume());
        setupCustomFullscreenButton();

        return root;
    }

    private void setupCustomFullscreenButton() {
        // B·∫°n c·∫ßn tham chi·∫øu v√† l∆∞u c√°c View kh√°c v√†o 'otherContent' n·∫øu c√≥.

        // L∆∞u chi·ªÅu cao ban ƒë·∫ßu (200dp)
        // ƒê·∫£m b·∫£o initialHeightPx ƒë∆∞·ª£c t√≠nh to√°n ch√≠nh x√°c v√† l∆∞u tr·ªØ:
        float density = getResources().getDisplayMetrics().density;
        initialHeightPx = (int) (200 * density);

        customFullscreenButton.setOnClickListener(v -> toggleFullscreen());
    }

    private void toggleFullscreen() {
        isFullScreen = !isFullScreen; // ƒê·∫£o ng∆∞·ª£c tr·∫°ng th√°i

        if (isFullScreen) {
            enterFullScreenMode();
        } else {
            exitFullScreenMode();
        }

        // C·∫≠p nh·∫≠t bi·ªÉu t∆∞·ª£ng cho n√∫t t√πy ch·ªânh
        int iconResource = isFullScreen ? R.drawable.exo_icon_fullscreen_exit : R.drawable.exo_icon_fullscreen_enter;
        customFullscreenButton.setImageResource(iconResource);
    }

// ----------------------------------------------------
// PH∆Ø∆†NG TH·ª®C H·ªñ TR·ª¢ FULLSCREEN
// ----------------------------------------------------

    private void enterFullScreenMode() {
        if (getActivity() == null || videoOverlayContainer == null || activityRootView == null) return;

        // 1. X√≥a CONTAINER kh·ªèi View cha ban ƒë·∫ßu
        originalParent.removeView(videoOverlayContainer);

        // 2. C·∫•u h√¨nh LayoutParams cho to√†n m√†n h√¨nh
        FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(
                ViewGroup.LayoutParams.MATCH_PARENT,
                ViewGroup.LayoutParams.MATCH_PARENT,
                Gravity.CENTER
        );

        // 3. ·∫®n thanh Status Bar (T√πy ch·ªçn)
        getActivity().getWindow().setFlags(
                WindowManager.LayoutParams.FLAG_FULLSCREEN,
                WindowManager.LayoutParams.FLAG_FULLSCREEN);

        // 4. Th√™m CONTAINER v√†o Activity Root View (L·ªõp ph·ªß)
        activityRootView.addView(videoOverlayContainer, params);

        // 5. Chuy·ªÉn sang m√†n h√¨nh ngang
        getActivity().setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
    }

    private void exitFullScreenMode() {
        if (getActivity() == null || videoOverlayContainer == null || originalParent == null || activityRootView == null) return;

        // 1. X√≥a CONTAINER kh·ªèi Activity Root View
        activityRootView.removeView(videoOverlayContainer);

        // 2. Hi·ªÉn th·ªã l·∫°i thanh Status Bar
        getActivity().getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);

        // 3. ƒê·∫∑t l·∫°i CONTAINER v·ªÅ k√≠ch th∆∞·ªõc ban ƒë·∫ßu (200dp)
        ViewGroup.LayoutParams params = new ViewGroup.LayoutParams(
                ViewGroup.LayoutParams.MATCH_PARENT,
                initialHeightPx // Gi√° tr·ªã 200dp
        );

        // 4. Th√™m CONTAINER tr·ªü l·∫°i View cha ban ƒë·∫ßu
        originalParent.addView(videoOverlayContainer, params);

        // 5. Chuy·ªÉn v·ªÅ m√†n h√¨nh d·ªçc
        getActivity().setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
    }

    private void toggleVolume() {
        if (player == null) return;

        if (isMuted) {
            // ƒêang t·∫Øt ti·∫øng -> B·∫≠t ti·∫øng (Set √¢m l∆∞·ª£ng v·ªÅ 1.0f)
            player.setVolume(1.0f);
            isMuted = false;
            // C·∫≠p nh·∫≠t bi·ªÉu t∆∞·ª£ng th√†nh B·∫≠t ti·∫øng (Volume Up)
            volumeButton.setImageResource(R.drawable.ic_volume_up);
        } else {
            // ƒêang b·∫≠t ti·∫øng -> T·∫Øt ti·∫øng (Set √¢m l∆∞·ª£ng v·ªÅ 0.0f)
            player.setVolume(0.0f);
            isMuted = true;
            // C·∫≠p nh·∫≠t bi·ªÉu t∆∞·ª£ng th√†nh T·∫Øt ti·∫øng (Volume Off/Mute)
            volumeButton.setImageResource(R.drawable.ic_volume_off);
        }
    }
    private void switchToVideo() {
        videoPosition = 0;
        isVideoPlaying = true;
        // ƒê·∫∑t l·∫°i tr·∫°ng th√°i √¢m l∆∞·ª£ng
        isMuted = false;
        setNextButton();
        setBackButton();
        // 1. ·∫®n ImageView
        stadiumImage.setVisibility(View.GONE);
        videoOverlayContainer.setVisibility(View.VISIBLE);
        // 2. Hi·ªÉn th·ªã VideoView
        playerView.setVisibility(View.VISIBLE);
        setVideoPlaying();
        toggleVolume();
    }

    /**
     * Chuy·ªÉn sang hi·ªÉn th·ªã ·∫£nh
     */
    private void switchToImage() {
        // 1. D·ª´ng video v√† ·∫©n VideoView
        isVideoPlaying = false;
        videoOverlayContainer.setVisibility(View.GONE);
        playerView.setVisibility(View.GONE);
        if (player != null) {
            player.stop();
        }

        // 2. Hi·ªÉn th·ªã ImageView
        stadiumImage.setVisibility(View.VISIBLE);
    }
    private void setNextButton(){

        if(isVideoPlaying == true){
            StadiumVideosDTO[] videosDTOS = stadiumDTO.getStadiumVideos().toArray(new StadiumVideosDTO[0]);
            if(videoPosition >= videosDTOS.length - 1){
                binding.btnNextVideo.setVisibility(View.GONE);
            }
            binding.btnPrevVideo.setVisibility(View.VISIBLE);
        }else{
            StadiumImagesDTO[] stadiumImagesDTOS = stadiumDTO.getStadiumImages().toArray(new StadiumImagesDTO[0]);
            if(imgPosition >= stadiumImagesDTOS.length - 1){
                binding.btnNext.setVisibility(View.GONE);
            }
            binding.btnPrev.setVisibility(View.VISIBLE);
        }
    }
    private void setBackButton(){
        if(isVideoPlaying == true){
            if(videoPosition <= 0){
                binding.btnPrevVideo.setVisibility(View.GONE);
            }
            binding.btnNextVideo.setVisibility(View.VISIBLE);
        }else{
            if(imgPosition <= 0){
                binding.btnPrev.setVisibility(View.GONE);
            }
            binding.btnNext.setVisibility(View.VISIBLE);

        }
    }

    private void observeStadiumListResponse() {
        stadiumViewModel.stadiums.observe(getViewLifecycleOwner(), response -> {
            // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa ph·∫£n h·ªìi
            if (response != null && response.getItems() != null && !response.getItems().isEmpty()) {

                stadiumDTO = response.getItems().get(0);
                loadStadiumData(stadiumDTO);

                Toast.makeText(this.getContext(), stadiumDTO.getName(), Toast.LENGTH_LONG).show();

            } else {
                // Hi·ªÉn th·ªã th√¥ng b√°o khi kh√¥ng c√≥ d·ªØ li·ªáu
                Toast.makeText(this.getContext(), "Kh√¥ng t√¨m th·∫•y chi ti·∫øt s√¢n v·∫≠n ƒë·ªông.", Toast.LENGTH_LONG).show();
            }
        });
    }

    //play video
    private void setVideoPlaying(){
        StadiumVideosDTO[] videosDTOS = stadiumDTO.getStadiumVideos().toArray(new StadiumVideosDTO[0]);
        String completeVideoUrl = "";

        if (videosDTOS != null && videosDTOS.length > 0) {
            // 1. L·∫•y t√™n file video
            completeVideoUrl = videosDTOS[videoPosition].videoUrl;

            // 2. T·∫°o ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi (ƒë·∫£m b·∫£o l√† th∆∞ m·ª•c ch·ª©a video tr√™n server)



            // 4. Chu·∫©n b·ªã ngu·ªìn media v√† b·∫Øt ƒë·∫ßu ph√°t
        }

// 4. Thi·∫øt l·∫≠p ƒë∆∞·ªùng d·∫´n video (ch·ªâ khi c√≥ URL h·ª£p l·ªá)
        if (!completeVideoUrl.isEmpty()) {
            // setVideoURI th∆∞·ªùng ƒë∆∞·ª£c khuy·∫øn ngh·ªã h∆°n setVideoPath khi d√πng URL m·∫°ng
            // setVideoPath ch·∫•p nh·∫≠n c·∫£ ƒë∆∞·ªùng d·∫´n c·ª•c b·ªô v√† URL m·∫°ng, nh∆∞ng Uri r√µ r√†ng h∆°n
            player = new ExoPlayer.Builder(requireContext()).build();

            // 3. Li√™n k·∫øt Player v·ªõi PlayerView
            playerView.setPlayer(player);
            // T·ª± ƒë·ªông chuy·ªÉn sang ch·∫ø ƒë·ªô video v√† b·∫Øt ƒë·∫ßu ph√°t
            prepareVideo(completeVideoUrl);
        }
    }

    private void loadStadiumData(StadiumDTO stadiumDTO) {
        CourtsDTO[] courtsList = stadiumDTO.getCourts().toArray( new CourtsDTO[0]);
        StadiumImagesDTO[] imagesList = stadiumDTO.getStadiumImages().toArray(new StadiumImagesDTO[0]);
        StadiumVideosDTO[] videosDTOS = stadiumDTO.getStadiumVideos().toArray( new StadiumVideosDTO[0]);

        binding.tvStadiumDescription.setText(stadiumDTO.getDescription());
        // C·∫≠p nh·∫≠t th√¥ng tin c∆° b·∫£n
        binding.tvStadiumName.setText(stadiumDTO.getName());
        binding.tvStadiumLocation.setText(stadiumDTO.getAddress());

        // C·∫≠p nh·∫≠t gi·ªù m·ªü c·ª≠a
        binding.tvOpeningHours.setText(formatTime(stadiumDTO.getOpenTime().toString()) + " - " + formatTime(stadiumDTO.getCloseTime().toString()));

        // C·∫≠p nh·∫≠t gi√°
        // 1. ƒê·∫£m b·∫£o danh s√°ch kh√¥ng r·ªóng
        if (courtsList != null) {
            // 2. Kh·ªüi t·∫°o minPrice v√† maxPrice b·∫±ng gi√° c·ªßa ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n
            int minPrice = Integer.parseInt(courtsList[0].getPricePerHour() + "");
            int maxPrice = Integer.parseInt(courtsList[0].getPricePerHour() + "");

            // 3. Duy·ªát qua danh s√°ch ƒë·ªÉ so s√°nh v√† c·∫≠p nh·∫≠t
            for (int i = 1; i < courtsList.length - 1; i++) {
                int currentPrice = Integer.parseInt(courtsList[i].getPricePerHour() + "");;

                if (currentPrice < minPrice) {
                    minPrice = currentPrice;
                }

                if (currentPrice > maxPrice) {
                    maxPrice = currentPrice;
                }
            }

            // 4. ƒê·ªãnh d·∫°ng v√† hi·ªÉn th·ªã k·∫øt qu·∫£
            String priceRange = "";
            if(minPrice != maxPrice){
                 priceRange = PriceFormatter.formatPrice(minPrice) + " - " + PriceFormatter.formatPrice(maxPrice) + " VND/gi·ªù";

            }else{
                priceRange = PriceFormatter.formatPrice(minPrice) + " VND/gi·ªù";
            }
            binding.tvPriceRange.setText(priceRange);

        } else {
            // Tr∆∞·ªùng h·ª£p danh s√°ch r·ªóng ho·∫∑c null
            binding.tvPriceRange.setText("Gi√° ch∆∞a c·∫≠p nh·∫≠t");
        }

        // T·∫£i h√¨nh ·∫£nh
        if (imagesList != null && imagesList != null) {

// Khai b√°o ki·ªÉu d·ªØ li·ªáu cho videoUri l√† String ho·∫∑c Uri
// N·∫øu l√† Uri, b·∫°n s·∫Ω c·∫ßn Uri.parse() sau khi c√≥ full URL.



            Glide.with(this.getContext()).load(ImageUtils.getFullUrl(imagesList.length > 0 ? "img/" + imagesList[0].imageUrl : "")).centerCrop().into(binding.ivStadiumImage);
            imgPosition = 0;
            if (imagesList.length <= 1){
                binding.btnNext.setVisibility(View.GONE);
                binding.btnPrev.setVisibility(View.GONE);
            }else{
                setNextButton();
                setBackButton();
            }

        } else {
            binding.ivStadiumImage.setImageResource(R.drawable.ic_launcher_background);
        }

        // TODO: Th√™m logic cho n√∫t ƒê·∫∑t s√¢n ngay
    }
    private void prepareVideo(String url) {
        // T·∫°o MediaItem t·ª´ URL
        MediaItem mediaItem = MediaItem.fromUri(url);
        StadiumVideosDTO[] videosDTOS = stadiumDTO.getStadiumVideos().toArray(new StadiumVideosDTO[0]);

        List<MediaItem> videoMediaItems = Arrays.stream(videosDTOS)
                .map(dto -> {
                    // Construct the full URI from the URL string provided by the DTO
                    String videoUrlPath = "img/" + dto.getVideoUrl();
                    // 3. L·∫•y URL ho√†n ch·ªânh (v√≠ d·ª•: "https://server.com/video/file.mp4")
                    Uri videoUri = Uri.parse(ImageUtils.getFullUrl(videoUrlPath));
                    System.out.println("url: " + videoUrlPath);

                    // Build the MediaItem
                    return MediaItem.fromUri(videoUri);
                })
                .collect(Collectors.toList());

        // G√°n MediaItem v√†o Player
        player.setMediaItems(videoMediaItems);
//        player.setRepeatMode(Player.REPEAT_MODE_ONE);
        player.setPauseAtEndOfMediaItems(true);

        // Chu·∫©n b·ªã Player
        player.prepare();

        // T·ª± ƒë·ªông ph√°t khi s·∫µn s√†ng
        player.setPlayWhenReady(true);
    }
    // H√†m ti·ªán √≠ch ƒë·ªÉ chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng gi·ªù OData (PT6H) sang hi·ªÉn th·ªã (06:00)
    private String formatTime(String odataTime) {
        if (odataTime == null || odataTime.length() < 3 || !odataTime.startsWith("PT")) {
            return "N/A";
        }

        // Lo·∫°i b·ªè ti·ªÅn t·ªë "PT"
        String timePart = odataTime.substring(2);

        int hours = 0;
        int minutes = 0;

        try {
            // T√¨m v√† tr√≠ch xu·∫•t gi·ªù (tr∆∞·ªõc 'H')
            int hIndex = timePart.indexOf('H');
            if (hIndex != -1) {
                String hourString = timePart.substring(0, hIndex);
                hours = Integer.parseInt(hourString);

                // C·∫≠p nh·∫≠t timePart ƒë·ªÉ ch·ªâ c√≤n l·∫°i ph·∫ßn ph√∫t (sau 'H')
                timePart = timePart.substring(hIndex + 1);
            }

            // T√¨m v√† tr√≠ch xu·∫•t ph√∫t (tr∆∞·ªõc 'M')
            int mIndex = timePart.indexOf('M');
            if (mIndex != -1) {
                String minuteString = timePart.substring(0, mIndex);
                minutes = Integer.parseInt(minuteString);
            }

            // N·∫øu c√≥ gi·ªù ho·∫∑c ph√∫t ƒë∆∞·ª£c ph√¢n t√≠ch, ƒë·ªãnh d·∫°ng l·∫°i
            if (hours > 0 || minutes > 0) {
                return String.format("%02d:%02d", hours, minutes);
            } else {
                // N·∫øu chu·ªói l√† "PT" ho·∫∑c "PT0H0M", tr·∫£ v·ªÅ "00:00"
                return "00:00";
            }

        } catch (NumberFormatException e) {
            // N·∫øu vi·ªác ph√¢n t√≠ch s·ªë g·∫∑p l·ªói, tr·∫£ v·ªÅ chu·ªói g·ªëc
            return odataTime;
        }
    }
    @Override
    public void onStop(){
        super.onStop();
        if (player != null) {
            activityRootView.removeView(videoOverlayContainer);
            getActivity().setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
            player.clearMediaItems();
            player.release();
            player = null;
        }

    }
}